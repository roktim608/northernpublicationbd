{"version":3,"names":["scAddressCss","wp","i18n","__","name","_b","this","names","disabled","required","requireName","placeholders","h","exportparts","part","value","_c","address","country","onScChange","e","_d","search","unselect","squared","showName","_e","line_1","updateAddress","target","onScInput","handleAddressInput","autocomplete","placeholder","_f","showLine2","_g","line_2","_h","class","showCity","city","_j","_k","_l","regions","length","showPostal","postal_code","_m","_o","_p","maxlength","_q","_r","_s","state","_t","_u","_a","detail","choices","loading","scTaxIdInputCss","number","type","slot","caret","style","color","tabindex","zones","label_small","Object","keys","map","role","onClick","sprintf"],"sources":["./src/components/ui/address/sc-address.scss?tag=sc-address&encapsulation=shadow","./src/components/ui/address/sc-address.tsx","./src/components/ui/tax-id-input/sc-tax-id-input.css?tag=sc-tax-id-input&encapsulation=shadow","./src/components/ui/tax-id-input/sc-tax-id-input.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\n.sc-address {\n  display: block;\n  position: relative;\n\n  [hidden] {\n    display: none;\n  }\n\n  &--loading {\n    min-height: 230px;\n  }\n\n  sc-skeleton {\n    display: block;\n    margin-bottom: 1em;\n  }\n\n  &__control {\n    display: block;\n\n    > * {\n      margin-bottom: var(--sc-address-column-spacing, -1px);\n    }\n  }\n\n  &__columns {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    flex-wrap: wrap;\n    justify-content: space-between;\n\n    > * {\n      flex: 1;\n      width: 50%;\n      margin-right: var(--sc-address-column-spacing, -1px);\n\n      &:last-child {\n        margin-right: 0;\n      }\n    }\n  }\n}\n","import { Component, Element, Event, EventEmitter, h, Method, Prop, State, Watch } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\nimport { hasState, hasCity, hasPostal, countryChoices } from '../../../functions/address';\nimport { reportChildrenValidity } from '../../../functions/form-data';\nimport { Address } from '../../../types';\n\n/**\n * @part base - The elements base wrapper.\n * @part input__base - The inputs base element.\n * @part select__base - The select boxes base element.\n * @part input - The html input element.\n * @part form-control - The form control wrapper.\n * @part label - The input label.\n * @part help-text - Help text that describes how to use the input.\n * @part trigger - The select box trigger.\n * @part panel - The select box panel.\n * @part caret - The select box caret.\n * @part search__base - The select search base.\n * @part search__input - The select search input.\n * @part search__form-control - The select search form control.\n * @part menu__base - The select menu base.\n * @part spinner__base  - The select spinner base.\n * @part empty - The select empty message.\n * @part block-ui - The block ui base component.\n * @part block-ui__content - The block ui content (spinner).\n */\n@Component({\n  tag: 'sc-address',\n  styleUrl: 'sc-address.scss',\n  shadow: true,\n})\nexport class ScAddress {\n  @Element() el: HTMLScAddressElement;\n\n  /** The address. */\n  @Prop({ mutable: true }) address: Partial<Address> = {\n    country: null,\n    city: null,\n    line_1: null,\n    line_2: null,\n    postal_code: null,\n    state: null,\n  };\n\n  @Prop() names: Partial<Address> = {\n    name: 'shipping_name',\n    country: 'shipping_country',\n    city: 'shipping_city',\n    line_1: 'shipping_line_1',\n    line_2: 'shipping_line_2',\n    postal_code: 'shipping_postal_code',\n    state: 'shipping_state',\n  };\n\n  @Prop() placeholders: Partial<Address> = {};\n\n  /** Is this loading?  */\n  @Prop() loading: boolean = false;\n\n  /** Is this disabled? */\n  @Prop() disabled: boolean;\n\n  /** The label for the field. */\n  @Prop() label: string;\n\n  /** Should we show name field? */\n  @Prop({ reflect: true, mutable: true }) showName: boolean;\n\n  /** Should we show name field? */\n  @Prop() showLine2: boolean;\n\n  /** Is this required? */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /** Is the name required */\n  @Prop({ reflect: true }) requireName: boolean = false;\n\n  /** Should we show the city field? */\n  @State() showCity: boolean = true;\n\n  /** Should we show the postal field? */\n  @State() showPostal: boolean = true;\n\n  /** Holds the regions for a given country. */\n  @State() regions: Array<{ value: string; label: string }>;\n\n  /** Holds our country choices. */\n  @State() countryChoices: Array<{ value: string; label: string }> = countryChoices;\n\n  /** Address change event. */\n  @Event() scChangeAddress: EventEmitter<Partial<Address>>;\n\n  /** Address change event. */\n  @Event() scInputAddress: EventEmitter<Partial<Address>>;\n\n  /** When the state changes, we want to update city and postal fields. */\n  @Watch('address')\n  handleAddressChange() {\n    if (!this.address.country) return;\n    this.setRegions();\n    this.showPostal = hasPostal(this.address.country);\n    this.showCity = hasCity(this.address.country);\n    this.scChangeAddress.emit(this.address);\n    this.scInputAddress.emit(this.address);\n  }\n\n  @Watch('requireName')\n  handleNameChange() {\n    if (this.requireName) {\n      this.showName = true;\n    }\n  }\n\n  decodeHtmlEntities(html: string) {\n    return new DOMParser().parseFromString(html, 'text/html')?.body.textContent || html;\n  }\n\n  updateAddress(address: Partial<Address>) {\n    this.address = { ...this.address, ...address };\n  }\n\n  handleAddressInput(address: Partial<Address>) {\n    this.scInputAddress.emit({ ...this.address, ...address });\n  }\n\n  clearAddress() {\n    this.address = {\n      name: this.address?.name,\n      country: null,\n      city: null,\n      line_1: null,\n      line_2: null,\n      postal_code: null,\n      state: null,\n    };\n  }\n\n  /** Set the regions based on the country. */\n  setRegions() {\n    if (hasState(this.address.country)) {\n      import('./countries.json').then(module => {\n        const countryRegions = module?.[this.address.country] as Array<{ value: string; label: string }>;\n\n        this.regions = (countryRegions || []).map(region => ({\n          ...region,\n          label: this.decodeHtmlEntities(region.label),\n        }));\n      });\n    } else {\n      this.regions = [];\n    }\n  }\n\n  componentWillLoad() {\n    this.handleAddressChange();\n    const country = this.countryChoices.find(country => country.value === this.address.country)?.value || null;\n    this.updateAddress({ country });\n    this.handleNameChange();\n  }\n\n  @Method()\n  async reportValidity() {\n    return reportChildrenValidity(this.el);\n  }\n\n  render() {\n    return (\n      <div class=\"sc-address\" part=\"base\">\n        <sc-form-control label={this.label} exportparts=\"label, help-text, form-control\" class=\"sc-address__control\" required={this.required}>\n          {this.showName && (\n            <sc-input\n              exportparts=\"base:input__base, input, form-control, label, help-text\"\n              value={this?.address?.name}\n              onScChange={(e: any) => this.updateAddress({ name: e.target.value || null })}\n              onScInput={(e: any) => this.handleAddressInput({ name: e.target.value || null })}\n              autocomplete=\"street-address\"\n              placeholder={this.placeholders.name || __('Name or Company Name', 'surecart')}\n              name={this.names?.name}\n              squared-bottom\n              disabled={this.disabled}\n              required={this.requireName}\n              aria-label={this.placeholders.name || __('Name or Company Name', 'surecart')}\n            />\n          )}\n\n          <sc-select\n            exportparts=\"base:select__base, input, form-control, label, help-text, trigger, panel, caret, search__base, search__input, search__form-control, menu__base, spinner__base, empty\"\n            part=\"name__input\"\n            value={this.address?.country}\n            onScChange={(e: any) => {\n              this.clearAddress();\n              this.updateAddress({ country: e.target.value });\n            }}\n            choices={this.countryChoices}\n            autocomplete={'country-name'}\n            placeholder={this.placeholders.country || __('Country', 'surecart')}\n            name={this.names?.country}\n            search\n            unselect={false}\n            squared-bottom\n            squared={this.showName}\n            disabled={this.disabled}\n            required={this.required}\n            aria-label={this.placeholders.country || __('Country', 'surecart')}\n          />\n\n          <sc-input\n            exportparts=\"base:input__base, input, form-control, label, help-text\"\n            value={this?.address?.line_1}\n            onScChange={(e: any) => this.updateAddress({ line_1: e.target.value || null })}\n            onScInput={(e: any) => this.handleAddressInput({ line_1: e.target.value || null })}\n            autocomplete=\"street-address\"\n            placeholder={this.placeholders.line_1 || __('Address', 'surecart')}\n            name={this.names?.line_1}\n            squared\n            disabled={this.disabled}\n            required={this.required}\n            aria-label={this.placeholders.line_1 || __('Address', 'surecart')}\n          />\n\n          {this.showLine2 && (\n            <sc-input\n              exportparts=\"base:input__base, input, form-control, label, help-text\"\n              value={this?.address?.line_2}\n              onScChange={(e: any) => this.updateAddress({ line_2: e.target.value || null })}\n              onScInput={(e: any) => this.handleAddressInput({ line_2: e.target.value || null })}\n              autocomplete=\"street-address\"\n              placeholder={this.placeholders.line_2 || __('Address Line 2', 'surecart')}\n              name={this.names?.line_2}\n              squared\n              disabled={this.disabled}\n              aria-label={this.placeholders.line_2 || __('Address Line 2', 'surecart')}\n            />\n          )}\n\n          <div class=\"sc-address__columns\" part=\"columns\">\n            {this.showCity && (\n              <sc-input\n                exportparts=\"base:input__base, input, form-control, label, help-text\"\n                placeholder={this.placeholders.city || __('City', 'surecart')}\n                name={this.names?.city}\n                value={this?.address?.city}\n                onScChange={(e: any) => this.updateAddress({ city: e.target.value || null })}\n                onScInput={(e: any) => this.handleAddressInput({ city: e.target.value || null })}\n                required={this.required}\n                squared={!!this?.regions?.length}\n                // style={{ marginRight: this.showPostal ? '-1px' : '0' }}\n                squared-top\n                disabled={this.disabled}\n                squared-right={this.showPostal}\n                aria-label={this.placeholders.city || __('City', 'surecart')}\n              />\n            )}\n\n            {this.showPostal && (\n              <sc-input\n                exportparts=\"base:input__base, input, form-control, label, help-text\"\n                placeholder={this.placeholders.postal_code || __('Postal Code/Zip', 'surecart')}\n                name={this.names?.postal_code}\n                onScChange={(e: any) => this.updateAddress({ postal_code: e.target.value || null })}\n                onScInput={(e: any) => this.handleAddressInput({ postal_code: e.target.value || null })}\n                autocomplete={'postal-code'}\n                required={this.required}\n                value={this?.address?.postal_code}\n                squared={!!this?.regions?.length}\n                squared-top\n                disabled={this.disabled}\n                maxlength={this.address?.country === 'US' ? 5 : null}\n                squared-left={this.showCity}\n                aria-label={this.placeholders.postal_code || __('Postal Code/Zip', 'surecart')}\n              />\n            )}\n          </div>\n\n          {!!this?.regions?.length && !!this?.address?.country && (\n            <sc-select\n              exportparts=\"base:select__base, input, form-control, label, help-text, trigger, panel, caret, search__base, search__input, search__form-control, menu__base, spinner__base, empty\"\n              placeholder={this.placeholders.state || __('State/Province/Region', 'surecart')}\n              name={this.names?.state}\n              autocomplete={'address-level1'}\n              value={this?.address?.state}\n              onScChange={(e: any) => this.updateAddress({ state: e.target.value || e.detail?.value || null })}\n              choices={this.regions}\n              required={this.required}\n              disabled={this.disabled}\n              search\n              squared-top\n              aria-label={this.placeholders.state || __('State/Province/Region', 'surecart')}\n            />\n          )}\n        </sc-form-control>\n\n        {this.loading && <sc-block-ui exportparts=\"base:block-ui, content:block-ui__content\"></sc-block-ui>}\n      </div>\n    );\n  }\n}\n",":host {\n  display: block;\n  z-index: 3;\n  position: relative;\n}\n","import { Component, h, Prop, Fragment, Watch, Event, EventEmitter, Method } from '@stencil/core';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { speak } from '@wordpress/a11y';\nimport { zones, getType } from '../../../functions/tax';\n\n@Component({\n  tag: 'sc-tax-id-input',\n  styleUrl: 'sc-tax-id-input.css',\n  shadow: true,\n})\nexport class ScTaxIdInput {\n  /** The input */\n  private input: HTMLScInputElement;\n\n  /** The country code. */\n  @Prop() country: string;\n\n  /** Force show the field. */\n  @Prop() show: boolean = false;\n\n  /** Type of tax id */\n  @Prop({ mutable: true }) type: string = 'other';\n\n  /** Tax ID Number */\n  @Prop() number: string = null;\n\n  /** The status */\n  @Prop() status: 'valid' | 'invalid' | 'unknown' = 'unknown';\n\n  /** Is this loading? */\n  @Prop() loading: boolean;\n\n  /** Help text. */\n  @Prop() help: string;\n\n  /** Other zones label */\n  @Prop() otherLabel: string = __('Tax ID', 'surecart');\n\n  /** GST zone label */\n  @Prop() caGstLabel: string = __('GST Number', 'surecart');\n\n  /** AU zone label */\n  @Prop() auAbnLabel: string = __('ABN Number', 'surecart');\n\n  /** UK zone label */\n  @Prop() gbVatLabel: string = __('UK VAT', 'surecart');\n\n  /** EU zone label */\n  @Prop() euVatLabel: string = __('EU VAT', 'surecart');\n\n  /** Whether tax input is required */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /** Make a request to update the order. */\n  @Event() scChange: EventEmitter<{ number: string; number_type: string }>;\n\n  /** Make a request to update the order. */\n  @Event() scInput: EventEmitter<Partial<{ number: string; number_type: string }>>;\n\n  /** Change the Type */\n  @Event() scInputType: EventEmitter<string>;\n\n  /** Set the checkout state. */\n  @Event() scSetState: EventEmitter<string>;\n\n  @Method()\n  async reportValidity() {\n    return this.input.reportValidity();\n  }\n\n  @Watch('otherLabel')\n  @Watch('caGstLabel')\n  @Watch('auAbnLabel')\n  @Watch('gbVatLabel')\n  @Watch('euVatLabel')\n  onLabelChange() {\n    zones.ca_gst.label = this.caGstLabel || zones.ca_gst.label;\n    zones.au_abn.label = this.auAbnLabel || zones.au_abn.label;\n    zones.gb_vat.label = this.gbVatLabel || zones.gb_vat.label;\n    zones.eu_vat.label = this.euVatLabel || zones.eu_vat.label;\n    zones.other.label = this.otherLabel || zones.other.label;\n  }\n\n  componentWillLoad() {\n    if (this.country && !this.type) {\n      this.type = getType(this.country);\n    }\n    this.onLabelChange();\n  }\n\n  renderStatus() {\n    if (this.status === 'valid') {\n      return <sc-icon name=\"check\" slot=\"prefix\" style={{ color: 'var(--sc-color-success-500)' }}></sc-icon>;\n    }\n    if (this.status === 'invalid') {\n      return <sc-icon name=\"x\" slot=\"prefix\" style={{ color: 'var(--sc-color-danger-500)' }}></sc-icon>;\n    }\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <sc-input name=\"tax_identifier.number_type\" required={this.required} value={this.type} style={{ display: 'none' }} />\n\n        <sc-input\n          ref={el => (this.input = el as HTMLScInputElement)}\n          label={zones?.[this?.type || 'other']?.label}\n          aria-label={__('Tax ID', 'surecart')}\n          placeholder={__('Enter Tax ID', 'surecart')}\n          name=\"tax_identifier.number\"\n          value={this.number}\n          onScInput={(e: any) => {\n            e.stopImmediatePropagation();\n            this.scInput.emit({\n              number: e.target.value,\n              number_type: this.type || 'other',\n            });\n          }}\n          onScChange={(e: any) => {\n            e.stopImmediatePropagation();\n            this.scChange.emit({\n              number: e.target.value,\n              number_type: this.type || 'other',\n            });\n          }}\n          required={this.required}\n        >\n          {this.loading && this.type === 'eu_vat' ? <sc-spinner slot=\"prefix\" style={{ '--spinner-size': '10px' }}></sc-spinner> : this.renderStatus()}\n\n          <sc-dropdown slot=\"suffix\" position=\"bottom-right\" role=\"select\" aria-multiselectable=\"false\" aria-label={__('Select number type', 'surecart')}>\n            <sc-button type=\"text\" slot=\"trigger\" caret loading={false} style={{ color: 'var(--sc-input-label-color)' }} tabindex=\"0\">\n              {zones?.[this?.type || 'other']?.label_small}\n            </sc-button>\n            <sc-menu>\n              {Object.keys(zones || {}).map(name => (\n                <sc-menu-item\n                  role=\"option\"\n                  onClick={() => {\n                    this.scInput.emit({\n                      number: this.number,\n                      number_type: name,\n                    });\n                    this.scChange.emit({\n                      number: this.number,\n                      number_type: name,\n                    });\n                    this.type = name;\n                  }}\n                  onKeyDown={e => {\n                    if (e.key === 'Enter') {\n                      this.scInput.emit({\n                        number: this.number,\n                        number_type: name,\n                      });\n                      this.scChange.emit({\n                        number: this.number,\n                        number_type: name,\n                      });\n                      this.type = name;\n                      this.input?.triggerFocus();\n                      speak(sprintf(__('%s selected', 'surecart'), zones[name].label_small, 'assertive'));\n                    }\n                  }}\n                  checked={this.type === name}\n                  aria-selected={this.type === name ? 'true' : 'false'}\n                  aria-label={zones[name].label_small}\n                >\n                  {zones[name].label_small}\n                </sc-menu-item>\n              ))}\n            </sc-menu>\n          </sc-dropdown>\n        </sc-input>\n      </Fragment>\n    );\n  }\n}\n"],"mappings":"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"}